// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User-related models
model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  profile_image String?
  bio           String?
  gender        String?

  refreshToken  String? @unique
  recoveryToken String? @unique

  interests         UserInterest[]
  activities        Activity[]
  comments          Comment[]
  feed              Feed[]
  groups            GroupMember[]
  followers         Follower[]       @relation("UserFollowers")
  following         Follower[]       @relation("UserFollowing")
  events            Event[]
  likesOnActivities LikeOnActivity[]
  likesOnComments   LikeOnComment[]
  searchFilters     SearchFilter[] // Inversa da relação de SearchFilter

  groupRequests GroupRequest[] // Inversa da relação de GroupRequest

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("users")
}

model UserInterest {
  interest_id    Int
  insterest_name String
  interest_type  String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@id([user_id, interest_id])
  @@map("user_interests")
}

// Activity-related models
model Activity {
  id            String   @id @default(uuid())
  duration      Int // Duration of the activity in seconds
  activity_date DateTime
  description   String?
  post_type     String // 'profile', 'group', 'private'

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  media    ActivityMedia[]
  comments Comment[]
  feed     Feed[] // Feed entries related to the activity
  likes    LikeOnActivity[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("activities")
}

model ActivityMedia {
  id          String   @id @default(uuid())
  media_url   String
  activity_id String
  activity    Activity @relation(fields: [activity_id], references: [id])

  @@map("activity_media")
}

model Comment {
  id           String @id @default(uuid())
  comment_text String

  likes LikeOnComment[]

  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  activity_id String
  activity    Activity @relation(fields: [activity_id], references: [id])

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("comments")
}

model LikeOnComment {
  id        String @id @default(uuid())
  commentId String
  userId    String

  user    User    @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])

  @@map("like_on_comments")
}

model LikeOnActivity {
  id         String @id @default(uuid())
  activityId String
  userId     String

  user     User     @relation(fields: [userId], references: [id])
  activity Activity @relation(fields: [activityId], references: [id])

  @@map("like_on_activities")
}

model SearchFilter {
  id         String @id @default(uuid())
  filterName String
  filterType String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("search_filters")
}

// Group-related models
model Group {
  id           String         @id @default(uuid())
  name         String
  description  String
  group_image  String?
  members      GroupMember[]
  feed         Feed[] // Feed entries related to the group
  events       Event[] // Events associated with the group
  group_events GroupOnEvent[] // Relationship for events
  activities   Activity[] // Inversa da relação de Activity

  created_at DateTime @default(now())

  groupRequests GroupRequest[] // Inversa da relação de GroupRequest

  @@map("groups")
}

model GroupMember {
  group_id String
  user_id  String

  group Group @relation(fields: [group_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@id([group_id, user_id])
  @@map("group_members")
}

model GroupRequest {
  id      String @id @default(uuid())
  groupId String
  userId  String
  status  String @default("pending")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("group_requests")
}

model Follower {
  follower_id String
  followed_id String

  follower User @relation("UserFollowers", fields: [follower_id], references: [id])
  followed User @relation("UserFollowing", fields: [followed_id], references: [id])

  @@id([follower_id, followed_id])
  @@map("followers")
}

// Event-related models
model Event {
  id                  String   @id @default(uuid())
  name                String
  event_date          DateTime
  address_street      String
  address_number      String
  address_city        String
  address_state       String
  address_cep         String
  is_recurring        Boolean  @default(false)
  recurrence_interval Int? // optional recurrence interval in days
  start_time          DateTime
  end_time            DateTime
  description         String?

  created_at DateTime @default(now())

  is_public        Boolean        @default(false)
  shared_in_groups GroupOnEvent[]

  user_id  String
  user     User    @relation(fields: [user_id], references: [id])
  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id])

  @@map("events")
}

model GroupOnEvent {
  group_id String
  event_id String

  group Group @relation(fields: [group_id], references: [id])
  event Event @relation(fields: [event_id], references: [id])

  @@id([group_id, event_id])
  @@map("groupsOnEvents")
}

// Feed model
model Feed {
  id           String   @id @default(uuid())
  post_content String
  created_at   DateTime @default(now())

  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
  activity_id String?
  activity    Activity? @relation(fields: [activity_id], references: [id])
  group_id    String?
  group       Group?    @relation(fields: [group_id], references: [id])

  @@map("feeds")
}
