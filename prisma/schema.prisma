generator client {
  provider = "prisma-client-js"
  seed     = "ts-node ./prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  profile_image String?
  bio           String?
  gender        String?

  refreshToken  String? @unique
  recoveryToken String? @unique

  interests  UserInterest[]
  activities Activity[]
  posts      Post[]
  groups     GroupMember[]
  events     Event[]

  groupRequests GroupRequest[]

  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  comments      Comment[]
  likes         Like[]
  searchFilters SearchFilter[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())
  Media      Media[]

  @@map("users")
}

model UserInterest {
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@id([user_id, category_id])
  @@map("user_interests")
}

model Activity {
  id            String   @id @default(uuid())
  duration      Int
  activity_date DateTime
  description   String?
  post_type     String

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  media    Media[]
  comments Comment[]
  likes    Like[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("activities")
}

model Post {
  id           String @id @default(uuid())
  post_content String
  post_type    String

  comments Comment[]
  likes    Like[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  user_id  String
  user     User    @relation(fields: [user_id], references: [id])
  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Media {
  id        String @id @default(uuid())
  media_url String

  activity_id String?
  activity    Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("medias_url")
}

model Category {
  id            Int    @id @default(autoincrement())
  category_name String

  activities   Activity[]
  userInterest UserInterest[]

  @@map("categories")
}

model Comment {
  id           String  @id @default(uuid())
  comment_text String
  user_id      String
  activity_id  String?
  post_id      String?

  likes Like[]

  user     User      @relation(fields: [user_id], references: [id])
  post     Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("comments")
}

model Like {
  id          String  @id @default(uuid())
  user_id     String
  post_id     String?
  comment_id  String?
  activity_id String?

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment  Comment?  @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  post     Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Group {
  id          String  @id @default(uuid())
  name        String
  description String
  group_image String?
  group_type  String

  members    GroupMember[]
  posts      Post[]
  events     Event[]
  activities Activity[]

  created_at DateTime @default(now())

  groupRequests GroupRequest[]

  @@map("groups")
}

model GroupMember {
  group_id String
  user_id  String

  group Group @relation(fields: [group_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@id([group_id, user_id])
  @@map("group_members")
}

model GroupRequest {
  id      String @id @default(uuid())
  groupId String
  userId  String
  status  String @default("pending")

  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("group_requests")
}

model Follower {
  follower_id String
  followed_id String

  follower User @relation("UserFollowers", fields: [follower_id], references: [id])
  followed User @relation("UserFollowing", fields: [followed_id], references: [id])

  @@id([follower_id, followed_id])
  @@map("followers")
}

model Event {
  id                  String   @id @default(uuid())
  name                String
  event_date          DateTime
  address_street      String
  address_number      String
  address_city        String
  address_state       String
  address_cep         String
  is_recurring        Boolean  @default(false)
  recurrence_interval Int?
  start_time          DateTime
  end_time            DateTime
  description         String?

  created_at DateTime @default(now())

  is_public Boolean @default(false)

  user_id  String
  user     User    @relation(fields: [user_id], references: [id])
  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id])

  @@map("events")
}

model SearchFilter {
  id         String @id @default(uuid())
  filterName String
  filterType String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("search_filters")
}
