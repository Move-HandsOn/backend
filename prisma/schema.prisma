generator client {
  provider = "prisma-client-js"
  seed     = "ts-node ./prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  profile_image String? @default("https://nxtsdipismqpeplgkcya.supabase.co/storage/v1/object/public/move/default.jpg?t=2024-11-12T15%3A25%3A15.634Z")
  bio           String?
  gender        String?

  refreshToken  String? @unique
  recoveryToken String? @unique

  interests  UserInterest[]
  activities Activity[]
  posts      Post[]
  groups     GroupMember[]
  events     Event[]

  groupRequests GroupRequest[]

  followers Follower[] @relation("UserFollowers")
  following Follower[] @relation("UserFollowing")

  comments      Comment[]
  likes         Like[]
  searchFilters SearchFilter[]

  updated_at   DateTime       @updatedAt
  created_at   DateTime       @default(now())
  media        Media[]
  group        Group[]
  notification Notification[]
  Calendar     Calendar[]

  @@map("users")
}

model UserInterest {
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, category_id])
  @@map("user_interests")
}

model Activity {
  id            String   @id @default(uuid())
  duration      Int
  activity_date DateTime
  description   String?
  post_type     String

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  media    Media[]
  comments Comment[]
  likes    Like[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  @@map("activities")
}

model Post {
  id           String @id @default(uuid())
  post_content String
  post_type    String

  comments Comment[]
  likes    Like[]
  media    Media[]

  updated_at DateTime @updatedAt
  created_at DateTime @default(now())

  user_id  String
  user     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Media {
  id        String @id @default(uuid())
  media_url String

  activity_id String?
  activity    Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  group_id String?
  group    Group?  @relation(fields: [group_id], references: [id], onDelete: Cascade)

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  post_id String?
  post    Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@map("medias_url")
}

model Category {
  id            Int    @id @default(autoincrement())
  category_name String

  activities   Activity[]
  userInterest UserInterest[]
  Group        Group[]

  @@map("categories")
}

model Comment {
  id           String  @id @default(uuid())
  comment_text String
  user_id      String
  activity_id  String?
  post_id      String?

  likes Like[]

  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post     Post?     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activity_id], references: [id], onDelete: Cascade)

  updated_at   DateTime       @updatedAt
  created_at   DateTime       @default(now())
  Notification Notification[]

  @@map("comments")
}

model Like {
  id          String  @id @default(uuid())
  user_id     String
  post_id     String?
  comment_id  String?
  activity_id String?

  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  comment      Comment?       @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  post         Post?          @relation(fields: [post_id], references: [id], onDelete: Cascade)
  activity     Activity?      @relation(fields: [activity_id], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@unique([user_id, post_id])
  @@unique([user_id, comment_id])
  @@unique([user_id, activity_id])
  @@map("likes")
}

model Group {
  id          String  @id @default(uuid())
  name        String
  description String
  group_image String?
  group_type  String

  category_id Int
  category    Category @relation(fields: [category_id], references: [id])

  admin_id String?
  admin    User?   @relation(fields: [admin_id], references: [id])

  members       GroupMember[]
  posts         Post[]
  events        Event[]
  activities    Activity[]
  groupRequests GroupRequest[]
  media         Media[]

  created_at DateTime @default(now())

  @@map("groups")
}

model GroupMember {
  group_id String
  user_id  String

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([group_id, user_id])
  @@map("group_members")
}

model GroupRequest {
  id       String @id @default(uuid())
  group_id String
  user_id  String
  status   String @default("pending")

  group Group @relation(fields: [group_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("group_requests")
}

model Follower {
  follower_id String
  followed_id String

  follower     User           @relation("UserFollowers", fields: [follower_id], references: [id])
  followed     User           @relation("UserFollowing", fields: [followed_id], references: [id])
  Notification Notification[]

  @@id([follower_id, followed_id])
  @@map("followers")
}

model Event {
  id                  String   @id @default(uuid())
  name                String
  event_date          DateTime
  address             String
  is_recurring        Boolean  @default(false)
  recurrence_interval Int?
  start_time          DateTime
  end_time            DateTime
  description         String?

  created_at DateTime @default(now())

  event_type String

  user_id  String
  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  group_id String?
  group    Group?     @relation(fields: [group_id], references: [id], onDelete: Cascade)
  Calendar Calendar[]

  @@map("events")
}

model SearchFilter {
  id          String @id @default(uuid())
  filter_name String
  filter_type String

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  @@map("search_filters")
}

model Notification {
  id         String @id @default(uuid())
  event_type String
  message    String

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  Follower    Follower? @relation(fields: [follower_id, followed_id], references: [follower_id, followed_id], onDelete: Cascade)
  follower_id String?
  followed_id String?

  comment_id String?
  comment    Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)

  like_id String?
  like    Like?   @relation(fields: [like_id], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notifications")
}

model Calendar {
  event_id String
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([event_id, user_id])
  @@map("calendars")
}
